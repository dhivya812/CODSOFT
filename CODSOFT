import math

# Initialize the board
board = [" " for _ in range(9)]

def print_board():
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print("| " + " | ".join(row) + " |")

def is_winner(brd, player):
    win_cond = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    return any(all(brd[pos] == player for pos in combo) for combo in win_cond)

def is_board_full(brd):
    return " " not in brd

def get_available_moves(brd):
    return [i for i, spot in enumerate(brd) if spot == " "]

# Jimmy's decision-making using Minimax algorithm
def minimax(brd, is_jimmy_turn):
    if is_winner(brd, "O"):
        return 1
    elif is_winner(brd, "X"):
        return -1
    elif is_board_full(brd):
        return 0

    if is_jimmy_turn:
        best_score = -math.inf
        for move in get_available_moves(brd):
            brd[move] = "O"
            score = minimax(brd, False)
            brd[move] = " "
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(brd):
            brd[move] = "X"
            score = minimax(brd, True)
            brd[move] = " "
            best_score = min(score, best_score)
        return best_score

# Let Jimmy make the best move
def jimmy_move():
    best_score = -math.inf
    best_move = None
    for move in get_available_moves(board):
        board[move] = "O"
        score = minimax(board, False)
        board[move] = " "
        if score > best_score:
            best_score = score
            best_move = move
    board[best_move] = "O"

def play_game():
    print("🎮 Welcome to Tic-Tac-Toe!")
    print("🤖 Meet Jimmy – the unbeatable AI bot!")
    print("🧠 Jimmy uses Minimax to make perfect moves.")
    print("You are 'X'. Jimmy is 'O'.\n")

    print_board()

    while True:
        # Human move
        try:
            move = int(input("Enter your move (0–8): "))
            if move < 0 or move > 8:
                print("Invalid input. Enter a number from 0 to 8.")
                continue
        except ValueError:
            print("Invalid input. Enter a valid number.")
            continue

        if board[move] != " ":
            print("Invalid move. Cell already taken.")
            continue

        board[move] = "X"
        print_board()

        if is_winner(board, "X"):
            print("🎉 You win! Jimmy needs more training.")
            break
        if is_board_full(board):
            print("🤝 It's a draw!")
            break

        # Jimmy's move
        print("Jimmy is thinking...")
        jimmy_move()
        print_board()

        if is_winner(board, "O"):
            print("🤖 Jimmy wins! Better luck next time.")
            break
        if is_board_full(board):
            print("🤝 It's a draw!")
            break

# Start the game
play_game()
